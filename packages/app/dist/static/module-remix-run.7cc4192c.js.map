{"version":3,"sources":["webpack://app/../node_modules/@remix-run/router/dist/router.js"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning$1","createPath","path","parsePath","nextLocation","delta","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","createHashHref","base","href","url","hashIndex","validateHashLocation","invariant","value","message","cond","createKey","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","getLocation","createHref","validateLocation","handlePop","history","push","historyState","replace","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","treePath","id","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","normalizePathname","generatePath","originalPath","params","warning","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","caseSensitive","regexpSource","error","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","promise","subscriber","v","k","signal","aborted","resolve","_ref2","unwrapTrackedPromise","isTrackedPromise","defer","redirect","ErrorResponse","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","historyAction","startNavigation","dispose","deleteFetcher","subscribe","updateState","newState","completeNavigation","_location$state","isActionReload","isMutationMethod","actionData","loaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","preventScrollReset","revalidate","interruptActiveLoads","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","pendingError","findNearestBoundary","actionOutput","handleAction","shortCircuited","errors","handleLoaders","navigation","actionMatch","getTargetMatch","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","overrideNavigation","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","_temp","_window","isFetchActionRedirect","redirectLocation","newOrigin","redirectHistoryAction","formMethod","formAction","formEncType","formData","currentMatches","fetchersToLoad","_ref8","fetchMatches","resolveDeferredResults","_ref9","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","createStaticHandler","query","_temp2","requestContext","method","isValidMethod","methodNotAllowedMatches","queryImpl","isResponse","queryRoute","_temp3","routeData","routeMatch","submit","loadRouteData","e","isQueryRouteResponse","isRedirectResponse","isRouteRequest","context","loaderRequest","pendingActionError","getLoaderMatchesUntilBoundary","executedLoaders","processRouteLoaderData","getStaticContextFromError","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","boundaryId","boundaryMatches","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","isStaticRequest","resultType","abortPromise","onReject","handler","activeMatches","resolvedLocation","contentType","statusCode","foundError","loaderHeaders","newLoaderData","mergedLoaderData","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","pathMatches"],"mappings":"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","file":"static/module-remix-run.7cc4192c.js","sourcesContent":["/**\n * @remix-run/router v1.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        })\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n\n    let executedLoaders = new Set();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id); // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError); // Add a null for any non-loader matches for proper revalidation on the client\n\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };\n//# sourceMappingURL=router.js.map\n"],"sourceRoot":""}