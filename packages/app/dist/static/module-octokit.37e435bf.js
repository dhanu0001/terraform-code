"use strict";(()=>{(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{54733:function(ae,v,_){_.d(v,{i:function(){return E}});var O=_(7502),C=_(31765),P=_(23531),f=_.n(P),S=_(78084);async function A(e,r){const a=y(e,r.auth);if(a)return a;const{data:l}=await(0,S.TG)({clientType:e.clientType,clientId:e.clientId,request:r.request||e.request,scopes:r.auth.scopes||e.scopes});await e.onVerification(l);const n=await R(r.request||e.request,e.clientId,e.clientType,l);return e.authentication=n,n}function y(e,r){if(r.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const a=e.authentication,l=("scopes"in r&&r.scopes||e.scopes).join(" "),n=a.scopes.join(" ");return l===n?a:!1}async function q(e){await new Promise(r=>setTimeout(r,e*1e3))}async function R(e,r,a,l){try{const n={clientId:r,request:e,code:l.device_code},{authentication:h}=a==="oauth-app"?await(0,S.i7)({...n,clientType:"oauth-app"}):await(0,S.i7)({...n,clientType:"github-app"});return{type:"token",tokenType:"oauth",...h}}catch(n){if(!n.response)throw n;const h=n.response.data.error;if(h==="authorization_pending")return await q(l.interval),R(e,r,a,l);if(h==="slow_down")return await q(l.interval+5),R(e,r,a,l);throw n}}async function U(e,r){return A(e,{auth:r})}async function L(e,r,a,l){let n=r.endpoint.merge(a,l);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return r(n);const{token:h}=await A(e,{request:r,auth:{type:"oauth"}});return n.headers.authorization=`token ${h}`,r(n)}const $="4.0.3";function B(e){const r=e.request||C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${$} ${(0,O.i)()}`}}),{request:a=r,...l}=e,n=e.clientType==="github-app"?{...l,clientType:"github-app",request:a}:{...l,clientType:"oauth-app",request:a,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(U.bind(null,n),{hook:L.bind(null,n)})}const W="2.0.4";async function j(e){if("code"in e.strategyOptions){const{authentication:r}=await(0,S.yi)({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...r}}if("onVerification"in e.strategyOptions){const a=await B({clientType:e.clientType,clientId:e.clientId,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...a}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function z(e,r={}){if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await j(e):await j(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const a=e.authentication;if("expiresAt"in a&&(r.type==="refresh"||new Date(a.expiresAt)<new Date)){const{authentication:l}=await(0,S.g$)({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:a.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...l}}if(r.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!a.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing")}if(r.type==="check"||r.type==="reset"){const l=r.type==="check"?S.a_:S.Eu;try{const{authentication:n}=await l({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...n},e.authentication}catch(n){throw n.status===404&&(n.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),n}}if(r.type==="delete"||r.type==="deleteAuthorization"){const l=r.type==="delete"?S.pQ:S.sA;try{await l({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(n){if(n.status!==404)throw n}return e.authentication.invalid=!0,e.authentication}return e.authentication}const re=/\/applications\/[^/]+\/(token|grant)s?/;function N(e){return e&&re.test(e)}async function se(e,r,a,l={}){const n=r.endpoint.merge(a,l);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return r(n);if(N(n.url)){const G=f()(`${e.clientId}:${e.clientSecret}`);return n.headers.authorization=`basic ${G}`,r(n)}const{token:h}=e.clientType==="oauth-app"?await z({...e,request:r}):await z({...e,request:r});return n.headers.authorization="token "+h,r(n)}function x({clientId:e,clientSecret:r,clientType:a="oauth-app",request:l=C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${W} ${(0,O.i)()}`}}),...n}){const h=Object.assign({clientType:a,clientId:e,clientSecret:r,strategyOptions:n,request:l});return Object.assign(z.bind(null,h),{hook:se.bind(null,h)})}x.VERSION=W;async function Z(e,r){if(r.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${f()(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in r){const{type:n,...h}={...r,...e};return r.factory(h)}const a={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...r};return(e.clientType==="oauth-app"?await x({...a,clientType:e.clientType}):await x({...a,clientType:e.clientType}))()}async function V(e,r,a,l){let n=r.endpoint.merge(a,l);if(/\/login\/(oauth\/access_token|device\/code)$/.test(n.url))return r(n);if(e.clientType==="github-app"&&!N(n.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${n.method} ${n.url}" is not supported.`);const h=f()(`${e.clientId}:${e.clientSecret}`);n.headers.authorization=`basic ${h}`;try{return await r(n)}catch(G){throw G.status!==401||(G.message=`[@octokit/auth-oauth-app] "${n.method} ${n.url}" does not support clientId/clientSecret basic authentication.`),G}}const i="5.0.4";function b(e){const r=Object.assign({request:C.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${i} ${(0,O.i)()}`}}),clientType:"oauth-app"},e);return Object.assign(Z.bind(null,r),{hook:V.bind(null,r)})}var T=_(91346),w=_(6990),k=_(77105),H=_.n(k);async function I({appId:e,privateKey:r,timeDifference:a}){try{const l=await(0,w.C)({id:+e,privateKey:r,now:a&&Math.floor(Date.now()/1e3)+a});return{type:"app",token:l.token,appId:l.appId,expiresAt:new Date(l.expiration*1e3).toISOString()}}catch(l){throw r==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):l}}function ce(){return new(H())({max:15e3,maxAge:1e3*60*59})}async function M(e,r){const a=J(r),l=await e.get(a);if(!l)return;const[n,h,G,F,D,Y]=l.split("|"),K=r.permissions||D.split(/,/).reduce((Q,ee)=>(/!$/.test(ee)?Q[ee.slice(0,-1)]="write":Q[ee]="read",Q),{});return{token:n,createdAt:h,expiresAt:G,permissions:K,repositoryIds:r.repositoryIds,repositoryNames:r.repositoryNames,singleFileName:Y,repositorySelection:F}}async function te(e,r,a){const l=J(r),n=r.permissions?"":Object.keys(a.permissions).map(G=>`${G}${a.permissions[G]==="write"?"!":""}`).join(","),h=[a.token,a.createdAt,a.expiresAt,a.repositorySelection,n,a.singleFileName].join("|");await e.set(l,h)}function J({installationId:e,permissions:r={},repositoryIds:a=[],repositoryNames:l=[]}){const n=Object.keys(r).sort().map(F=>r[F]==="read"?F:`${F}!`).join(","),h=a.sort().join(","),G=l.join(",");return[e,h,G,n].filter(Boolean).join("|")}function oe({installationId:e,token:r,createdAt:a,expiresAt:l,repositorySelection:n,permissions:h,repositoryIds:G,repositoryNames:F,singleFileName:D}){return Object.assign({type:"token",tokenType:"installation",token:r,installationId:e,permissions:h,createdAt:a,expiresAt:l,repositorySelection:n},G?{repositoryIds:G}:null,F?{repositoryNames:F}:null,D?{singleFileName:D}:null)}async function X(e,r,a){const l=Number(r.installationId||e.installationId);if(!l)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(r.factory){const{type:ne,factory:pe,oauthApp:Ee,...le}={...e,...r};return pe(le)}const n=Object.assign({installationId:l},r);if(!r.refresh){const ne=await M(e.cache,n);if(ne){const{token:pe,createdAt:Ee,expiresAt:le,permissions:he,repositoryIds:we,repositoryNames:_e,singleFileName:be,repositorySelection:Ge}=ne;return oe({installationId:l,token:pe,createdAt:Ee,expiresAt:le,permissions:he,repositorySelection:Ge,repositoryIds:we,repositoryNames:_e,singleFileName:be})}}const h=await I(e),G=a||e.request,{data:{token:F,expires_at:D,repositories:Y,permissions:K,repository_selection:Q,single_file:ee}}=await G("POST /app/installations/{installation_id}/access_tokens",{installation_id:l,repository_ids:r.repositoryIds,repositories:r.repositoryNames,permissions:r.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${h.token}`}}),ue=K||{},de=Q||"all",ge=Y?Y.map(ne=>ne.id):void 0,me=Y?Y.map(ne=>ne.name):void 0,Te=new Date().toISOString();return await te(e.cache,n,{token:F,createdAt:Te,expiresAt:D,repositorySelection:de,permissions:ue,repositoryIds:ge,repositoryNames:me,singleFileName:ee}),oe({installationId:l,token:F,createdAt:Te,expiresAt:D,repositorySelection:de,permissions:ue,repositoryIds:ge,repositoryNames:me,singleFileName:ee})}async function ie(e,r){switch(r.type){case"app":return I(e);case"oauth":e.log.warn(new T.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return X(e,{...r,type:"installation"});case"oauth-user":return e.oauthApp(r);default:throw new Error(`Invalid auth type: ${r.type}`)}}const t=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function u(e){const a=`^(?:${e.map(l=>l.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(l=>`(?:${l})`).join("|")})[^/]*$`;return new RegExp(a,"i")}const p=u(t);function m(e){return!!e&&p.test(e)}const g=5*1e3;function o(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function s(e,r,a,l){const n=r.endpoint.merge(a,l),h=n.url;if(/\/login\/oauth\/access_token$/.test(h))return r(n);if(m(h.replace(r.endpoint.DEFAULTS.baseUrl,""))){const{token:D}=await I(e);n.headers.authorization=`bearer ${D}`;let Y;try{Y=await r(n)}catch(K){if(o(K)||typeof K.response.headers.date=="undefined")throw K;const Q=Math.floor((Date.parse(K.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(K.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${Q} seconds. Retrying request with the difference accounted for.`);const{token:ee}=await I({...e,timeDifference:Q});return n.headers.authorization=`bearer ${ee}`,r(n)}return Y}if(N(h)){const D=await e.oauthApp({type:"oauth-app"});return n.headers.authorization=D.headers.authorization,r(n)}const{token:G,createdAt:F}=await X(e,{},r);return n.headers.authorization=`token ${G}`,c(e,r,n,F)}async function c(e,r,a,l,n=0){const h=+new Date-+new Date(l);try{return await r(a)}catch(G){if(G.status!==401)throw G;if(h>=g)throw n>0&&(G.message=`After ${n} retries within ${h/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),G;++n;const F=n*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${n}, wait: ${F/1e3}s)`),await new Promise(D=>setTimeout(D,F)),c(e,r,a,l,n)}}const d="4.0.7";function E(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+e.appId))throw new Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const r=Object.assign({warn:console.warn.bind(console)},e.log),a=e.request||C.request.defaults({headers:{"user-agent":`octokit-auth-app.js/${d} ${(0,O.i)()}`}}),l=Object.assign({request:a,cache:ce()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:r,oauthApp:b({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:a})});return Object.assign(ie.bind(null,l),{hook:s.bind(null,l)})}},42469:function(ae,v,_){_.r(v),_.d(v,{oauthAuthorizationUrl:function(){return O}});function O(P){const f=P.clientType||"oauth-app",S=P.baseUrl||"https://github.com",A={clientType:f,allowSignup:P.allowSignup!==!1,clientId:P.clientId,login:P.login||null,redirectUrl:P.redirectUrl||null,state:P.state||Math.random().toString(36).substr(2),url:""};if(f==="oauth-app"){const y="scopes"in P?P.scopes:[];A.scopes=typeof y=="string"?y.split(/[,\s]+/).filter(Boolean):y}return A.url=C(`${S}/login/oauth/authorize`,A),A}function C(P,f){const S={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let A=P;return Object.keys(S).filter(y=>f[y]!==null).filter(y=>y!=="scopes"?!0:f.clientType==="github-app"?!1:!Array.isArray(f[y])||f[y].length>0).map(y=>[S[y],`${f[y]}`]).forEach(([y,q],R)=>{A+=R===0?"?":"&",A+=`${y}=${encodeURIComponent(q)}`}),A}},78084:function(ae,v,_){var O;O={value:!0};function C(i){return i&&typeof i=="object"&&"default"in i?i.default:i}var P=_(42469),f=_(31765),S=_(29717),A=C(_(23531));const y="2.0.4";function q(i){const b=i.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(b.baseUrl)?"https://github.com":b.baseUrl.replace("/api/v3","")}async function R(i,b,T){const w={baseUrl:q(i),headers:{accept:"application/json"},...T},k=await i(b,w);if("error"in k.data){const H=new S.RequestError(`${k.data.error_description} (${k.data.error}, ${k.data.error_uri})`,400,{request:i.endpoint.merge(b,w),headers:k.headers});throw H.response=k,H}return k}function U({request:i=f.request,...b}){const T=q(i);return P.oauthAuthorizationUrl({...b,baseUrl:T})}async function L(i){const b=i.request||f.request,T=await R(b,"POST /login/oauth/access_token",{client_id:i.clientId,client_secret:i.clientSecret,code:i.code,redirect_uri:i.redirectUrl}),w={clientType:i.clientType,clientId:i.clientId,clientSecret:i.clientSecret,token:T.data.access_token,scopes:T.data.scope.split(/\s+/).filter(Boolean)};if(i.clientType==="github-app"){if("refresh_token"in T.data){const k=new Date(T.headers.date).getTime();w.refreshToken=T.data.refresh_token,w.expiresAt=$(k,T.data.expires_in),w.refreshTokenExpiresAt=$(k,T.data.refresh_token_expires_in)}delete w.scopes}return{...T,authentication:w}}function $(i,b){return new Date(i+b*1e3).toISOString()}async function B(i){const b=i.request||f.request,T={client_id:i.clientId};return"scopes"in i&&Array.isArray(i.scopes)&&(T.scope=i.scopes.join(" ")),R(b,"POST /login/device/code",T)}async function W(i){const b=i.request||f.request,T=await R(b,"POST /login/oauth/access_token",{client_id:i.clientId,device_code:i.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),w={clientType:i.clientType,clientId:i.clientId,token:T.data.access_token,scopes:T.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in i&&(w.clientSecret=i.clientSecret),i.clientType==="github-app"){if("refresh_token"in T.data){const k=new Date(T.headers.date).getTime();w.refreshToken=T.data.refresh_token,w.expiresAt=j(k,T.data.expires_in),w.refreshTokenExpiresAt=j(k,T.data.refresh_token_expires_in)}delete w.scopes}return{...T,authentication:w}}function j(i,b){return new Date(i+b*1e3).toISOString()}async function z(i){const T=await(i.request||f.request)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${A(`${i.clientId}:${i.clientSecret}`)}`},client_id:i.clientId,access_token:i.token}),w={clientType:i.clientType,clientId:i.clientId,clientSecret:i.clientSecret,token:i.token,scopes:T.data.scopes};return T.data.expires_at&&(w.expiresAt=T.data.expires_at),i.clientType==="github-app"&&delete w.scopes,{...T,authentication:w}}async function re(i){const b=i.request||f.request,T=await R(b,"POST /login/oauth/access_token",{client_id:i.clientId,client_secret:i.clientSecret,grant_type:"refresh_token",refresh_token:i.refreshToken}),w=new Date(T.headers.date).getTime(),k={clientType:"github-app",clientId:i.clientId,clientSecret:i.clientSecret,token:T.data.access_token,refreshToken:T.data.refresh_token,expiresAt:N(w,T.data.expires_in),refreshTokenExpiresAt:N(w,T.data.refresh_token_expires_in)};return{...T,authentication:k}}function N(i,b){return new Date(i+b*1e3).toISOString()}async function se(i){const{request:b,clientType:T,clientId:w,clientSecret:k,token:H,...I}=i,M=await(b||f.request)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${A(`${w}:${k}`)}`},client_id:w,access_token:H,...I}),te=Object.assign({clientType:T,clientId:w,clientSecret:k,token:M.data.token},M.data.expires_at?{expiresAt:M.data.expires_at}:{});return{...M,authentication:te}}async function x(i){const b=i.request||f.request,T=A(`${i.clientId}:${i.clientSecret}`),w=await b("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${T}`},client_id:i.clientId,access_token:i.token}),k={clientType:i.clientType,clientId:i.clientId,clientSecret:i.clientSecret,token:w.data.token,scopes:w.data.scopes};return w.data.expires_at&&(k.expiresAt=w.data.expires_at),i.clientType==="github-app"&&delete k.scopes,{...w,authentication:k}}async function Z(i){const b=i.request||f.request,T=A(`${i.clientId}:${i.clientSecret}`);return b("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${T}`},client_id:i.clientId,access_token:i.token})}async function V(i){const b=i.request||f.request,T=A(`${i.clientId}:${i.clientSecret}`);return b("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${T}`},client_id:i.clientId,access_token:i.token})}O=y,v.a_=z,v.TG=B,v.sA=V,v.pQ=Z,v.i7=W,v.yi=L,O=U,v.g$=re,v.Eu=x,O=se},29717:function(ae,v,_){_.r(v),_.d(v,{RequestError:function(){return A}});var O=_(91346),C=_(29928),P=_.n(C);const f=P()(y=>console.warn(y)),S=P()(y=>console.warn(y));class A extends Error{constructor(q,R,U){super(q),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=R;let L;"headers"in U&&typeof U.headers!="undefined"&&(L=U.headers),"response"in U&&(this.response=U.response,L=U.response.headers);const $=Object.assign({},U.request);U.request.headers.authorization&&($.headers=Object.assign({},U.request.headers,{authorization:U.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),$.url=$.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=$,Object.defineProperty(this,"code",{get(){return f(new O.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),R}}),Object.defineProperty(this,"headers",{get(){return S(new O.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),L||{}}})}}},31765:function(ae,v,_){_.r(v),_.d(v,{request:function(){return ie}});var O=_(66439),C=_(7502);function P(t){return t?Object.keys(t).reduce((u,p)=>(u[p.toLowerCase()]=t[p],u),{}):{}}function f(t,u){const p=Object.assign({},t);return Object.keys(u).forEach(m=>{(0,O.P)(u[m])?m in t?p[m]=f(t[m],u[m]):Object.assign(p,{[m]:u[m]}):Object.assign(p,{[m]:u[m]})}),p}function S(t){for(const u in t)t[u]===void 0&&delete t[u];return t}function A(t,u,p){if(typeof u=="string"){let[g,o]=u.split(" ");p=Object.assign(o?{method:g,url:o}:{url:g},p)}else p=Object.assign({},u);p.headers=P(p.headers),S(p),S(p.headers);const m=f(t||{},p);return t&&t.mediaType.previews.length&&(m.mediaType.previews=t.mediaType.previews.filter(g=>!m.mediaType.previews.includes(g)).concat(m.mediaType.previews)),m.mediaType.previews=m.mediaType.previews.map(g=>g.replace(/-preview/,"")),m}function y(t,u){const p=/\?/.test(t)?"&":"?",m=Object.keys(u);return m.length===0?t:t+p+m.map(g=>g==="q"?"q="+u.q.split("+").map(encodeURIComponent).join("+"):`${g}=${encodeURIComponent(u[g])}`).join("&")}const q=/\{[^}]+\}/g;function R(t){return t.replace(/^\W+|\W+$/g,"").split(/,/)}function U(t){const u=t.match(q);return u?u.map(R).reduce((p,m)=>p.concat(m),[]):[]}function L(t,u){return Object.keys(t).filter(p=>!u.includes(p)).reduce((p,m)=>(p[m]=t[m],p),{})}function $(t){return t.split(/(%[0-9A-Fa-f]{2})/g).map(function(u){return/%[0-9A-Fa-f]/.test(u)||(u=encodeURI(u).replace(/%5B/g,"[").replace(/%5D/g,"]")),u}).join("")}function B(t){return encodeURIComponent(t).replace(/[!'()*]/g,function(u){return"%"+u.charCodeAt(0).toString(16).toUpperCase()})}function W(t,u,p){return u=t==="+"||t==="#"?$(u):B(u),p?B(p)+"="+u:u}function j(t){return t!=null}function z(t){return t===";"||t==="&"||t==="?"}function re(t,u,p,m){var g=t[p],o=[];if(j(g)&&g!=="")if(typeof g=="string"||typeof g=="number"||typeof g=="boolean")g=g.toString(),m&&m!=="*"&&(g=g.substring(0,parseInt(m,10))),o.push(W(u,g,z(u)?p:""));else if(m==="*")Array.isArray(g)?g.filter(j).forEach(function(s){o.push(W(u,s,z(u)?p:""))}):Object.keys(g).forEach(function(s){j(g[s])&&o.push(W(u,g[s],s))});else{const s=[];Array.isArray(g)?g.filter(j).forEach(function(c){s.push(W(u,c))}):Object.keys(g).forEach(function(c){j(g[c])&&(s.push(B(c)),s.push(W(u,g[c].toString())))}),z(u)?o.push(B(p)+"="+s.join(",")):s.length!==0&&o.push(s.join(","))}else u===";"?j(g)&&o.push(B(p)):g===""&&(u==="&"||u==="?")?o.push(B(p)+"="):g===""&&o.push("");return o}function N(t){return{expand:se.bind(null,t)}}function se(t,u){var p=["+","#",".","/",";","?","&"];return t.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(m,g,o){if(g){let c="";const d=[];if(p.indexOf(g.charAt(0))!==-1&&(c=g.charAt(0),g=g.substr(1)),g.split(/,/g).forEach(function(E){var e=/([^:\*]*)(?::(\d+)|(\*))?/.exec(E);d.push(re(u,c,e[1],e[2]||e[3]))}),c&&c!=="+"){var s=",";return c==="?"?s="&":c!=="#"&&(s=c),(d.length!==0?c:"")+d.join(s)}else return d.join(",")}else return $(o)})}function x(t){let u=t.method.toUpperCase(),p=(t.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),m=Object.assign({},t.headers),g,o=L(t,["method","baseUrl","url","headers","request","mediaType"]);const s=U(p);p=N(p).expand(o),/^http/.test(p)||(p=t.baseUrl+p);const c=Object.keys(t).filter(e=>s.includes(e)).concat("baseUrl"),d=L(o,c);if(!/application\/octet-stream/i.test(m.accept)&&(t.mediaType.format&&(m.accept=m.accept.split(/,/).map(e=>e.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${t.mediaType.format}`)).join(",")),t.mediaType.previews.length)){const e=m.accept.match(/[\w-]+(?=-preview)/g)||[];m.accept=e.concat(t.mediaType.previews).map(r=>{const a=t.mediaType.format?`.${t.mediaType.format}`:"+json";return`application/vnd.github.${r}-preview${a}`}).join(",")}return["GET","HEAD"].includes(u)?p=y(p,d):"data"in d?g=d.data:Object.keys(d).length&&(g=d),!m["content-type"]&&typeof g!="undefined"&&(m["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(u)&&typeof g=="undefined"&&(g=""),Object.assign({method:u,url:p,headers:m},typeof g!="undefined"?{body:g}:null,t.request?{request:t.request}:null)}function Z(t,u,p){return x(A(t,u,p))}function V(t,u){const p=A(t,u),m=Z.bind(null,p);return Object.assign(m,{DEFAULTS:p,defaults:V.bind(null,p),merge:A.bind(null,p),parse:x})}const T={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/7.0.3 ${(0,C.i)()}`},mediaType:{format:"",previews:[]}},w=V(null,T);var k=_(34911),H=_.n(k),I=_(29717);const ce="6.2.2";function M(t){return t.arrayBuffer()}function te(t){const u=t.request&&t.request.log?t.request.log:console;((0,O.P)(t.body)||Array.isArray(t.body))&&(t.body=JSON.stringify(t.body));let p={},m,g;return(t.request&&t.request.fetch||globalThis.fetch||H())(t.url,Object.assign({method:t.method,body:t.body,headers:t.headers,redirect:t.redirect},t.request)).then(async s=>{g=s.url,m=s.status;for(const c of s.headers)p[c[0]]=c[1];if("deprecation"in p){const c=p.link&&p.link.match(/<([^>]+)>; rel="deprecation"/),d=c&&c.pop();u.warn(`[@octokit/request] "${t.method} ${t.url}" is deprecated. It is scheduled to be removed on ${p.sunset}${d?`. See ${d}`:""}`)}if(!(m===204||m===205)){if(t.method==="HEAD"){if(m<400)return;throw new I.RequestError(s.statusText,m,{response:{url:g,status:m,headers:p,data:void 0},request:t})}if(m===304)throw new I.RequestError("Not modified",m,{response:{url:g,status:m,headers:p,data:await J(s)},request:t});if(m>=400){const c=await J(s);throw new I.RequestError(oe(c),m,{response:{url:g,status:m,headers:p,data:c},request:t})}return J(s)}}).then(s=>({status:m,url:g,headers:p,data:s})).catch(s=>{throw s instanceof I.RequestError||s.name==="AbortError"?s:new I.RequestError(s.message,500,{request:t})})}async function J(t){const u=t.headers.get("content-type");return/application\/json/.test(u)?t.json():!u||/^text\/|charset=utf-8$/.test(u)?t.text():M(t)}function oe(t){return typeof t=="string"?t:"message"in t?Array.isArray(t.errors)?`${t.message}: ${t.errors.map(JSON.stringify).join(", ")}`:t.message:`Unknown error: ${JSON.stringify(t)}`}function X(t,u){const p=t.defaults(u);return Object.assign(function(g,o){const s=p.merge(g,o);if(!s.request||!s.request.hook)return te(p.parse(s));const c=(d,E)=>te(p.parse(p.merge(d,E)));return Object.assign(c,{endpoint:p,defaults:X.bind(null,p)}),s.request.hook(c,s)},{endpoint:p,defaults:X.bind(null,p)})}const ie=X(w,{headers:{"user-agent":`octokit-request.js/${ce} ${(0,C.i)()}`}})},89393:function(ae,v,_){_.d(v,{v:function(){return g}});var O=_(7502),C=_(93222),P=_(31765);const f="5.0.4";function S(o){return`Request failed due to following response errors:
`+o.errors.map(s=>` - ${s.message}`).join(`
`)}class A extends Error{constructor(s,c,d){super(S(d)),this.request=s,this.headers=c,this.response=d,this.name="GraphqlResponseError",this.errors=d.errors,this.data=d.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const y=["method","baseUrl","url","headers","request","query","mediaType"],q=["query","method","url"],R=/\/api\/v3\/?$/;function U(o,s,c){if(c){if(typeof s=="string"&&"query"in c)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const r in c)if(!!q.includes(r))return Promise.reject(new Error(`[@octokit/graphql] "${r}" cannot be used as variable name`))}const d=typeof s=="string"?Object.assign({query:s},c):s,E=Object.keys(d).reduce((r,a)=>y.includes(a)?(r[a]=d[a],r):(r.variables||(r.variables={}),r.variables[a]=d[a],r),{}),e=d.baseUrl||o.endpoint.DEFAULTS.baseUrl;return R.test(e)&&(E.url=e.replace(R,"/api/graphql")),o(E).then(r=>{if(r.data.errors){const a={};for(const l of Object.keys(r.headers))a[l]=r.headers[l];throw new A(E,a,r.data)}return r.data.data})}function L(o,s){const c=o.defaults(s);return Object.assign((E,e)=>U(c,E,e),{defaults:L.bind(null,c),endpoint:c.endpoint})}const $=L(P.request,{headers:{"user-agent":`octokit-graphql.js/${f} ${(0,O.i)()}`},method:"POST",url:"/graphql"});function B(o){return L(o,{method:"POST",url:"/graphql"})}const W=/^v1\./,j=/^ghs_/,z=/^ghu_/;async function re(o){const s=o.split(/\./).length===3,c=W.test(o)||j.test(o),d=z.test(o);return{type:"token",token:o,tokenType:s?"app":c?"installation":d?"user-to-server":"oauth"}}function N(o){return o.split(/\./).length===3?`bearer ${o}`:`token ${o}`}async function se(o,s,c,d){const E=s.endpoint.merge(c,d);return E.headers.authorization=N(o),s(E)}const x=function(s){if(!s)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof s!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return s=s.replace(/^(token|bearer) +/i,""),Object.assign(re.bind(null,s),{hook:se.bind(null,s)})},Z="4.1.0";class V{constructor(s={}){const c=new C.Collection,d={baseUrl:P.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},s.request,{hook:c.bind(null,"request")}),mediaType:{previews:[],format:""}};if(d.headers["user-agent"]=[s.userAgent,`octokit-core.js/${Z} ${(0,O.i)()}`].filter(Boolean).join(" "),s.baseUrl&&(d.baseUrl=s.baseUrl),s.previews&&(d.mediaType.previews=s.previews),s.timeZone&&(d.headers["time-zone"]=s.timeZone),this.request=P.request.defaults(d),this.graphql=B(this.request).defaults(d),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},s.log),this.hook=c,s.authStrategy){const{authStrategy:e,...r}=s,a=e(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:r},s.auth));c.wrap("request",a.hook),this.auth=a}else if(!s.auth)this.auth=async()=>({type:"unauthenticated"});else{const e=x(s.auth);c.wrap("request",e.hook),this.auth=e}this.constructor.plugins.forEach(e=>{Object.assign(this,e(this,s))})}static defaults(s){return class extends this{constructor(...d){const E=d[0]||{};if(typeof s=="function"){super(s(E));return}super(Object.assign({},s,E,E.userAgent&&s.userAgent?{userAgent:`${E.userAgent} ${s.userAgent}`}:null))}}}static plugin(...s){var c;const d=this.plugins;return c=class extends this{},c.plugins=d.concat(s.filter(e=>!d.includes(e))),c}}V.VERSION=Z,V.plugins=[];const i="1.0.4";function b(o){o.hook.wrap("request",(s,c)=>{o.log.debug("request",c);const d=Date.now(),E=o.request.endpoint.parse(c),e=E.url.replace(c.baseUrl,"");return s(c).then(r=>(o.log.info(`${E.method} ${e} - ${r.status} in ${Date.now()-d}ms`),r)).catch(r=>{throw o.log.info(`${E.method} ${e} - ${r.status} in ${Date.now()-d}ms`),r})})}b.VERSION=i;const T="5.0.1";function w(o){if(!o.data)return{...o,data:[]};if(!("total_count"in o.data&&!("url"in o.data)))return o;const c=o.data.incomplete_results,d=o.data.repository_selection,E=o.data.total_count;delete o.data.incomplete_results,delete o.data.repository_selection,delete o.data.total_count;const e=Object.keys(o.data)[0],r=o.data[e];return o.data=r,typeof c!="undefined"&&(o.data.incomplete_results=c),typeof d!="undefined"&&(o.data.repository_selection=d),o.data.total_count=E,o}function k(o,s,c){const d=typeof s=="function"?s.endpoint(c):o.request.endpoint(s,c),E=typeof s=="function"?s:o.request,e=d.method,r=d.headers;let a=d.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const l=await E({method:e,url:a,headers:r}),n=w(l);return a=((n.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:n}}catch(l){if(l.status!==409)throw l;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function H(o,s,c,d){return typeof c=="function"&&(d=c,c=void 0),I(o,[],k(o,s,c)[Symbol.asyncIterator](),d)}function I(o,s,c,d){return c.next().then(E=>{if(E.done)return s;let e=!1;function r(){e=!0}return s=s.concat(d?d(E.value,r):E.value.data),e?s:I(o,s,c,d)})}const ce=Object.assign(H,{iterator:k}),M=null;function te(o){return typeof o=="string"?M.includes(o):!1}function J(o){return{paginate:Object.assign(H.bind(null,o),{iterator:k.bind(null,o)})}}J.VERSION=T;const oe={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForEnterprise:["GET /enterprises/{enterprise}/actions/cache/usage"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getGithubActionsDefaultWorkflowPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubAdvancedSecurityBillingGhe:["GET /enterprises/{enterprise}/settings/billing/advanced-security"],getGithubAdvancedSecurityBillingOrg:["GET /orgs/{org}/settings/billing/advanced-security"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/code-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /organizations/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /organizations/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /organizations/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /organizations/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /organizations/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /organizations/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /organizations/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /organizations/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /organizations/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{addCustomLabelsToSelfHostedRunnerForEnterprise:["POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],getServerStatistics:["GET /enterprise-installation/{enterprise_or_org}/server-statistics"],listLabelsForSelfHostedRunnerForEnterprise:["GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],removeAllCustomLabelsFromSelfHostedRunnerForEnterprise:["DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForEnterprise:["DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForEnterprise:["PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomRole:["POST /orgs/{org}/custom_roles"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteCustomRole:["DELETE /orgs/{org}/custom_roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomRoles:["GET /organizations/{organization_id}/custom_roles"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listFineGrainedPermissions:["GET /orgs/{org}/fine_grained_permissions"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateCustomRole:["PATCH /orgs/{org}/custom_roles/{role_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},X="6.7.0";function ie(o,s){const c={};for(const[d,E]of Object.entries(s))for(const[e,r]of Object.entries(E)){const[a,l,n]=r,[h,G]=a.split(/ /),F=Object.assign({method:h,url:G},l);c[d]||(c[d]={});const D=c[d];if(n){D[e]=t(o,d,e,F,n);continue}D[e]=o.request.defaults(F)}return c}function t(o,s,c,d,E){const e=o.request.defaults(d);function r(...a){let l=e.endpoint.merge(...a);if(E.mapToData)return l=Object.assign({},l,{data:l[E.mapToData],[E.mapToData]:void 0}),e(l);if(E.renamed){const[n,h]=E.renamed;o.log.warn(`octokit.${s}.${c}() has been renamed to octokit.${n}.${h}()`)}if(E.deprecated&&o.log.warn(E.deprecated),E.renamedParameters){const n=e.endpoint.merge(...a);for(const[h,G]of Object.entries(E.renamedParameters))h in n&&(o.log.warn(`"${h}" parameter is deprecated for "octokit.${s}.${c}()". Use "${G}" instead`),G in n||(n[G]=n[h]),delete n[h]);return e(n)}return e(...a)}return Object.assign(r,e)}function u(o){return{rest:ie(o,oe)}}u.VERSION=X;function p(o){const s=ie(o,oe);return{...s,rest:s}}p.VERSION=X;const m="19.0.5",g=V.plugin(b,p,J).defaults({userAgent:`octokit-rest.js/${m}`})}}]);})();

//# sourceMappingURL=module-octokit.37e435bf.js.map