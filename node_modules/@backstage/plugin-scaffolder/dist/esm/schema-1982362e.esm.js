import { E as EntityPicker, n as EntityPickerSchema, o as EntityNamePicker, p as entityNamePickerValidation, q as EntityNamePickerSchema, t as EntityTagsPicker, u as EntityTagsPickerSchema, R as RepoUrlPicker, w as repoPickerValidation, x as RepoUrlPickerSchema, O as OwnerPicker, y as OwnerPickerSchema, z as OwnedEntityPicker, A as OwnedEntityPickerSchema } from './index-8dc22fc0.esm.js';

const DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS = [
  {
    component: EntityPicker,
    name: "EntityPicker",
    schema: EntityPickerSchema
  },
  {
    component: EntityNamePicker,
    name: "EntityNamePicker",
    validation: entityNamePickerValidation,
    schema: EntityNamePickerSchema
  },
  {
    component: EntityTagsPicker,
    name: "EntityTagsPicker",
    schema: EntityTagsPickerSchema
  },
  {
    component: RepoUrlPicker,
    name: "RepoUrlPicker",
    validation: repoPickerValidation,
    schema: RepoUrlPickerSchema
  },
  {
    component: OwnerPicker,
    name: "OwnerPicker",
    schema: OwnerPickerSchema
  },
  {
    component: OwnedEntityPicker,
    name: "OwnedEntityPicker",
    schema: OwnedEntityPickerSchema
  }
];

function isObject(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function extractUiSchema(schema, uiSchema) {
  if (!isObject(schema)) {
    return;
  }
  const { properties, items, anyOf, oneOf, allOf, dependencies } = schema;
  for (const propName in schema) {
    if (!schema.hasOwnProperty(propName)) {
      continue;
    }
    if (propName.startsWith("ui:")) {
      uiSchema[propName] = schema[propName];
      delete schema[propName];
    }
  }
  if (isObject(properties)) {
    for (const propName in properties) {
      if (!properties.hasOwnProperty(propName)) {
        continue;
      }
      const schemaNode = properties[propName];
      if (!isObject(schemaNode)) {
        continue;
      }
      const innerUiSchema = {};
      uiSchema[propName] = innerUiSchema;
      extractUiSchema(schemaNode, innerUiSchema);
    }
  }
  if (isObject(items)) {
    const innerUiSchema = {};
    uiSchema.items = innerUiSchema;
    extractUiSchema(items, innerUiSchema);
  }
  if (Array.isArray(anyOf)) {
    for (const schemaNode of anyOf) {
      if (!isObject(schemaNode)) {
        continue;
      }
      extractUiSchema(schemaNode, uiSchema);
    }
  }
  if (Array.isArray(oneOf)) {
    for (const schemaNode of oneOf) {
      if (!isObject(schemaNode)) {
        continue;
      }
      extractUiSchema(schemaNode, uiSchema);
    }
  }
  if (Array.isArray(allOf)) {
    for (const schemaNode of allOf) {
      if (!isObject(schemaNode)) {
        continue;
      }
      extractUiSchema(schemaNode, uiSchema);
    }
  }
  if (isObject(dependencies)) {
    for (const depName of Object.keys(dependencies)) {
      const schemaNode = dependencies[depName];
      if (!isObject(schemaNode)) {
        continue;
      }
      extractUiSchema(schemaNode, uiSchema);
    }
  }
}
const extractSchemaFromStep = (inputStep) => {
  const uiSchema = {};
  const returnSchema = JSON.parse(JSON.stringify(inputStep));
  extractUiSchema(returnSchema, uiSchema);
  return { uiSchema, schema: returnSchema };
};
const createFieldValidation = () => {
  const fieldValidation = {
    __errors: [],
    addError: (message) => {
      var _a;
      (_a = fieldValidation.__errors) == null ? void 0 : _a.push(message);
    }
  };
  return fieldValidation;
};

export { DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS as D, createFieldValidation as c, extractSchemaFromStep as e };
//# sourceMappingURL=schema-1982362e.esm.js.map
