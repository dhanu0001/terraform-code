{"version":3,"file":"validator-ajv8.umd.development.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from \"ajv8\";\nimport addFormats, { FormatsPluginOptions } from \"ajv-formats\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from \"ajv8\";\nimport toPath from \"lodash/toPath\";\nimport isObject from \"lodash/isObject\";\nimport clone from \"lodash/clone\";\nimport {\n  CustomValidator,\n  ERRORS_KEY,\n  ErrorSchema,\n  ErrorSchemaBuilder,\n  ErrorTransformer,\n  FieldValidation,\n  FormValidation,\n  GenericObjectType,\n  getDefaultFormState,\n  mergeValidationData,\n  REF_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n> implements ValidatorType<T>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const {\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass,\n    } = options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass\n    );\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    const builder = new ErrorSchemaBuilder<T>();\n    if (errors.length) {\n      errors.forEach((error) => {\n        const { property, message } = error;\n        const path = toPath(property);\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n        if (message) {\n          builder.addErrors(message, path);\n        }\n      });\n    }\n    return builder.ErrorSchema;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema[ERRORS_KEY]!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @private\n   */\n  private transformRJSFValidationErrors(\n    errors: ErrorObject[] = []\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, message, params, schemaPath } = e;\n      let property = instancePath.replace(/\\//g, \".\");\n      let stack = `${property} ${message}`.trim();\n      if (\"missingProperty\" in params) {\n        property = property\n          ? `${property}.${params.missingProperty}`\n          : params.missingProperty;\n        stack = message!;\n      }\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack,\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(\n    schema: RJSFSchema,\n    formData?: T\n  ): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema[\"$id\"]) {\n      compiledValidator = this.ajv.getSchema(schema[\"$id\"]);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === \"function\") {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T>,\n    transformErrors?: ErrorTransformer\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T>(\n      this,\n      schema,\n      formData,\n      schema,\n      true\n    ) as T;\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData)\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: S) {\n    for (const key in node) {\n      const realObj: GenericObjectType = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: S[]): S[] {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]) as S;\n    }\n    return node;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T, rootSchema: S) {\n    const rootSchemaId = rootSchema[\"$id\"] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = this.withIdRefPrefix(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix[\"$id\"]) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix[\"$id\"]);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn(\"Error encountered compiling schema:\", e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: S | S[]): S | S[] {\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    if (isObject(schemaNode)) {\n      return this.withIdRefPrefixObject(clone<S>(schemaNode));\n    }\n    return schemaNode;\n  }\n}\n","import { RJSFSchema, StrictRJSFSchema, ValidatorType } from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport AJV8Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  options: CustomValidatorOptionsType = {},\n  localizer?: Localizer\n): ValidatorType<T, S> {\n  return new AJV8Validator<T, S>(options, localizer);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV8Validator","options","localizer","toErrorSchema","errors","builder","ErrorSchemaBuilder","length","error","property","message","path","toPath","splice","addErrors","ErrorSchema","toErrorList","errorSchema","fieldPath","errorList","ERRORS_KEY","concat","map","join","stack","reduce","acc","key","createErrorHandler","formData","handler","__errors","addError","push","value","formObject","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","e","instancePath","keyword","params","schemaPath","replace","trim","missingProperty","name","rawValidation","schema","compilationError","undefined","compiledValidator","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","$schema","newFormData","getDefaultFormState","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","rootSchema","rootSchemaId","addSchema","schemaWithIdRefPrefix","result","console","warn","removeSchema","schemaNode","clone","customizeValidator"],"mappings":"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"}