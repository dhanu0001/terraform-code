{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T[], S, F>, ArrayFieldState<T>> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<\n    T = any,\n    S extends StrictRJSFSchema = RJSFSchema,\n    F extends FormContextType = any\n  >(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        S,\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items)\n      ? (schema.items as S)\n      : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items)\n      ? (schema.items as S[])\n      : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>[\"onBlur\"];\n    onFocus: FieldProps<T[], S, F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v: any) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, AnyOfFieldState> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, S, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n    // so that only the root objects themselves are created without adding undefined children properties\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData,\n        \"excludeObjectChildren\"\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport {\n  asNumber,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, ObjectFieldState> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, S, F>(\n      uiSchema\n    );\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] } as S,\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, S, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          S,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, S, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, S, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, S, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends React.Component<FieldProps<T, S, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(\n            ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            )\n          )}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, S, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ className, onClick, disabled }: IconButtonProps<T, S, F>) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: TitleFieldProps<T, S, F>) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  UnsupportedFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: UnsupportedFieldProps<T, S, F>) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" } as S}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ time = true, ...props }: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, S, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport {\n  dataURItoBlob,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, S, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, value }: WidgetProps<T, S, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  processSelectValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import {\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, \"schemaUtils\"> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n  };\n}\n","import {\n  Field,\n  FormContextType,\n  RegistryFieldsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nfunction templates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>[\"ButtonTemplates\"] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import React, { Component } from \"react\";\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _pick from \"lodash/pick\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | \"top\" | \"bottom\";\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Omit<\n    FormState<T, S, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, S, F>,\n    nextState: FormState<T, S, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, S, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[][]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(\n      formData,\n      fields as unknown as string[]\n    );\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T): string[][] => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[][] = [],\n      paths: string[][] = [[]]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(\n            newErrorSchema,\n            extraErrors,\n            \"preventDuplicates\"\n          ) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, S, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry<\n      T,\n      S,\n      F\n    >();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = \"top\",\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === \"top\" && this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n        {showErrorList === \"bottom\" && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  FormProps<T, S, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n> & {\n  ref?: React.Ref<Form<T, S, F>>;\n};\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(themeProps: ThemeProps<T, S, F>) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, S, F>,\n      ref: ForwardedRef<Form<T, S, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_Component","props","_this","call","this","_getNewFormDataRow","_this$props","schema","schemaUtils","registry","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","concat","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","newErrorSchema","_this$props2","errorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_this$props3","_newKeyedFormData","slice","onChangeForIndex","value","id","_extends2","_this$props4","_extends","onSelectChange","_this$props5","idSchema","undefined","$id","_props$formData","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","_proto","prototype","isItemRequired","type","includes","canAddItem","formItems","_this$props6","addable","getUiOptions","uiSchema","maxItems","render","_this$props7","ITEMS_KEY","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this2","_this$props8","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","_this$props9","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","widget","options","_objectWithoutPropertiesLoose","_getUiOptions2","_excluded","Widget","getWidget","multiple","label","_this$props10","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3$widget","_getUiOptions3","_excluded2","_this$props11","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4$widget","_getUiOptions4","_excluded3","_this3","_this$props12","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","_this$props$formData","itemSchemas","additionalSchema","additional","canRemove","_props$canRemove","_props$canMoveUp","_props$canMoveDown","_this$props13","fields","ItemSchemaField","ArraySchemaField","SchemaField","_getUiOptions5$ordera","_getUiOptions5","orderable","_getUiOptions5$remova","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","get","Component","BooleanField","_getUiOptions$widget","_getUiOptions","oneOf","option","o","_schema$enum","schemaWithEnumNames","enums","enumNames","every","v","enum","AnyOfField","onOptionChange","selectedOption","newOption","newFormData","guessType","properties","assign","optionsToDiscard","_step","_iterator","_createForOfIteratorHelperLoose","done","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","optionSchema","baseType","_this$props5$disabled","_this$props5$readonly","_this$props5$hideErro","_this$props5$errorSch","_SchemaField","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","useState","lastValue","_useState","setLastValue","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_len","arguments","args","_key","apply","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","_extends3","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","_getUiOptions$duplica","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","_newKeys","_extends4","newKeys","keyValues","_ref","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","orderedProperties","_this$props5$uiSchema","_this$props5$required","schemaProperties","_schema$properties","description","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","getFieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","_React$Component","shouldComponentUpdate","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","ArrayFieldDescriptionTemplate","_options$label","ArrayFieldItemTemplate","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","console","log","Error","inputValue","inputProps","getInputProps","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","SubmitButton","getSubmitButtonOptions","submitText","_getSubmitButtonOptio2","_getSubmitButtonOptio","submitButtonProps","norender","IconButton","iconType","_props$iconType","icon","otherProps","DescriptionField","ErrorList","error","stack","Label","htmlFor","WrapIfAdditionalTemplate","_props$errors","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","SelectWidget","rootId","AltDateWidget","_ref2$time","time","_ref2$disabled","_ref2$readonly","_ref2$autofocus","_useReducer","useReducer","action","parseDateString","toDateString","values","readyForChange","property","_setState","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","data","year","month","day","hour","minute","second","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","_ref$time","CheckboxWidget","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","itemDisabled","disabledCls","checkbox","all","selected","at","sort","a","b","Number","selectValue","deselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","dataURItoBlob","blob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","from","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","_ref$multiple","processSelectValue","TextareaWidget","_ref4","rows","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","_this$state","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","_this$state2","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","_this$state3","getRegistry","_this$props$templates","_getDefaultRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","_this$props5$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props5$noHtml5V","noHtml5Validate","_this$props5$showErro","showErrorList","_internalFormWrapper","_this$state4","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}