{"version":3,"file":"utils.umd.production.min.js","sources":["../src/isObject.ts","../src/asNumber.ts","../src/constants.ts","../src/getUiOptions.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/mergeSchemas.ts","../src/schema/getDefaultFormState.ts","../src/schema/retrieveSchema.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getSubmitButtonOptions.ts","../src/getWidget.tsx","../src/toConstant.ts","../src/pad.ts","../src/processSelectValue.ts","../src/allowAdditionalItems.ts","../src/canExpand.ts","../src/dataURItoBlob.ts","../src/getInputProps.ts","../src/getTemplate.ts","../src/hasWidget.ts","../src/localToUTC.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/utcToLocal.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== \"undefined\" && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== \"undefined\" && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === \"object\" && thing !== null && !Array.isArray(thing);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === \"\") {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === \"number\" && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = \"__additional_property\";\nexport const ADDITIONAL_PROPERTIES_KEY = \"additionalProperties\";\nexport const ALL_OF_KEY = \"allOf\";\nexport const ANY_OF_KEY = \"anyOf\";\nexport const CONST_KEY = \"const\";\nexport const DEFAULT_KEY = \"default\";\nexport const DEFINITIONS_KEY = \"definitions\";\nexport const DEPENDENCIES_KEY = \"dependencies\";\nexport const ENUM_KEY = \"enum\";\nexport const ERRORS_KEY = \"__errors\";\nexport const ID_KEY = \"$id\";\nexport const ITEMS_KEY = \"items\";\nexport const NAME_KEY = \"$name\";\nexport const ONE_OF_KEY = \"oneOf\";\nexport const PROPERTIES_KEY = \"properties\";\nexport const REQUIRED_KEY = \"required\";\nexport const SUBMIT_BTN_OPTIONS_KEY = \"submitButtonOptions\";\nexport const REF_KEY = \"$ref\";\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = \"__rjsf_additionalProperties\";\nexport const UI_FIELD_KEY = \"ui:field\";\nexport const UI_WIDGET_KEY = \"ui:widget\";\nexport const UI_OPTIONS_KEY = \"ui:options\";\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from \"./constants\";\nimport isObject from \"./isObject\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  UiSchema,\n} from \"./types\";\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @returns - An object containing all the `ui:xxx` options with the stripped off\n */\nexport default function getUiOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf(\"ui:\") === 0)\n    .reduce((options, key) => {\n      const value = uiSchema[key];\n      if (key === UI_WIDGET_KEY && isObject(value)) {\n        console.error(\n          \"Setting options via ui:widget object is no longer supported, use ui:options instead\"\n        );\n        return options;\n      }\n      if (key === UI_OPTIONS_KEY && isObject(value)) {\n        return { ...options, ...value };\n      }\n      return { ...options, [key.substring(3)]: value };\n    }, {});\n}\n","import isEqualWith from \"lodash/isEqualWith\";\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === \"function\" && typeof other === \"function\") {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from \"jsonpointer\";\nimport omit from \"lodash/omit\";\n\nimport { REF_KEY } from \"./constants\";\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(\n  key: string,\n  object: GenericObjectType\n) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<\n  S extends StrictRJSFSchema = RJSFSchema\n>($ref?: string, rootSchema: S = {} as S): S {\n  let ref = $ref || \"\";\n  if (ref.startsWith(\"#\")) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import { RJSFSchema, StrictRJSFSchema, ValidatorType } from \"../types\";\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @returns - The index of the matched option or 0 if none is available\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If the schema describes an object then we need to add slightly more\n    // strict matching to the schema, because unless the schema uses the\n    // \"requires\" keyword, an object will match the schema as long as it\n    // doesn't have matching keys with a conflicting type. To do this we use an\n    // \"anyOf\" with an array of requires. This augmentation expresses that the\n    // schema should match if any of the keys in the schema are present on the\n    // object and pass validation.\n    if (option.properties) {\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option.properties).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return \"array\";\n  }\n  if (typeof value === \"string\") {\n    return \"string\";\n  }\n  if (value == null) {\n    return \"null\";\n  }\n  if (typeof value === \"boolean\") {\n    return \"boolean\";\n  }\n  if (!isNaN(value)) {\n    return \"number\";\n  }\n  if (typeof value === \"object\") {\n    return \"object\";\n  }\n  // Default to string if we can't figure it out\n  return \"string\";\n}\n","import guessType from \"./guessType\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return \"string\";\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return \"object\";\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes(\"null\")) {\n    type = type.find((type) => type !== \"null\");\n  }\n\n  return type;\n}\n","import isObject from \"./isObject\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  return (\n    Array.isArray(schema.items) &&\n    schema.items.length > 0 &&\n    schema.items.every((item) => isObject(item))\n  );\n}\n","import get from \"lodash/get\";\n\nimport isObject from \"./isObject\";\nimport { GenericObjectType } from \"../src\";\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param defaults - The defaults to merge\n * @param formData - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(\n  defaults: T,\n  formData: T\n): T {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(\n        defaults ? get(defaults, key) : {},\n        get(formData, key)\n      );\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from \"./isObject\";\nimport { GenericObjectType } from \"./types\";\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | \"preventDuplicates\" = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === \"preventDuplicates\") {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from \"./constants\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  return (\n    (Array.isArray(schema.enum) && schema.enum.length === 1) ||\n    CONST_KEY in schema\n  );\n}\n","import union from \"lodash/union\";\n\nimport { REQUIRED_KEY } from \"./constants\";\nimport getSchemaType from \"./getSchemaType\";\nimport isObject from \"./isObject\";\nimport { GenericObjectType } from \"./types\";\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType\n) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === \"object\" || getSchemaType(obj2) === \"object\") &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport {\n  ANY_OF_KEY,\n  DEFAULT_KEY,\n  DEPENDENCIES_KEY,\n  PROPERTIES_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport findSchemaDefinition from \"../findSchemaDefinition\";\nimport getMatchingOption from \"./getMatchingOption\";\nimport getSchemaType from \"../getSchemaType\";\nimport isObject from \"../isObject\";\nimport isFixedItems from \"../isFixedItems\";\nimport mergeDefaultsWithFormData from \"../mergeDefaultsWithFormData\";\nimport mergeObjects from \"../mergeObjects\";\nimport {\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport isMultiSelect from \"./isMultiSelect\";\nimport retrieveSchema, { resolveDependencies } from \"./retrieveSchema\";\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== \"boolean\") {\n        return item as S;\n      }\n    }\n  } else if (\n    schema.items &&\n    !Array.isArray(schema.items) &&\n    typeof schema.items !== \"boolean\"\n  ) {\n    return schema.items as S;\n  }\n  if (\n    additionalItems !== AdditionalItemsHandling.Ignore &&\n    isObject(schema.additionalItems)\n  ) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the default state is desired\n * @param [parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n *          object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  rawSchema: S,\n  parentDefaults?: T,\n  rootSchema: S = {} as S,\n  rawFormData?: T,\n  includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n): T | T[] | undefined {\n  const formData = isObject(rawFormData) ? rawFormData : {};\n  let schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(\n      defaults!,\n      schema.default as GenericObjectType\n    ) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    // Use referenced schema defaults for this node.\n    const refSchema = findSchemaDefinition<S>(schema[REF_KEY]!, rootSchema);\n    return computeDefaults<T, S>(\n      validator,\n      refSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues\n    );\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return computeDefaults<T, S>(\n      validator,\n      resolvedSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues\n    );\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(\n        validator,\n        itemSchema,\n        Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues\n      )\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    schema = schema.oneOf![\n      getMatchingOption(\n        validator,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        rootSchema\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    schema = schema.anyOf![\n      getMatchingOption(\n        validator,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        rootSchema\n      )\n    ] as S;\n  }\n\n  // Not defaults defined for this node, fallback to generic typed ones.\n  if (typeof defaults === \"undefined\") {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType(schema)) {\n    // We need to recur for object schema inner default values.\n    case \"object\":\n      return Object.keys(schema.properties || {}).reduce(\n        (acc: GenericObjectType, key: string) => {\n          // Compute the defaults for this node, with the parent defaults we might\n          // have from a previous run: defaults[key].\n          const computedDefault = computeDefaults<T, S>(\n            validator,\n            get(schema, [PROPERTIES_KEY, key]),\n            get(defaults, [key]),\n            rootSchema,\n            get(formData, [key]),\n            includeUndefinedValues === \"excludeObjectChildren\"\n              ? false\n              : includeUndefinedValues\n          );\n          if (includeUndefinedValues) {\n            acc[key] = computedDefault;\n          } else if (isObject(computedDefault)) {\n            // Store computedDefault if it's a non-empty object (e.g. not {})\n            if (!isEmpty(computedDefault)) {\n              acc[key] = computedDefault;\n            }\n          } else if (computedDefault !== undefined) {\n            // Store computedDefault if it's a defined primitive (e.g. true)\n            acc[key] = computedDefault;\n          }\n          return acc;\n        },\n        {}\n      ) as T;\n\n    case \"array\":\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(\n            schema,\n            AdditionalItemsHandling.Fallback,\n            idx\n          );\n          return computeDefaults<T, S>(validator, schemaItem, item, rootSchema);\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S>(\n            validator,\n            schemaItem,\n            get(defaults, [idx]),\n            rootSchema,\n            item\n          );\n        }) as T[];\n      }\n      if (schema.minItems) {\n        if (!isMultiSelect<T>(validator, schema, rootSchema)) {\n          const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n          if (schema.minItems > defaultsLength) {\n            const defaultEntries: T[] = (defaults || []) as T[];\n            // populate the array with the defaults\n            const fillerSchema: S = getInnerSchemaForArrayItem<S>(\n              schema,\n              AdditionalItemsHandling.Invert\n            );\n            const fillerDefault = fillerSchema.default;\n            const fillerEntries: T[] = new Array(\n              schema.minItems - defaultsLength\n            ).fill(\n              computeDefaults<any>(\n                validator,\n                fillerSchema,\n                fillerDefault,\n                rootSchema\n              )\n            ) as T[];\n            // then fill up the rest with either the item default or empty, up to minItems\n            return defaultEntries.concat(fillerEntries);\n          }\n        }\n        return defaults ? defaults : [];\n      }\n  }\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n *          object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n) {\n  if (!isObject(theSchema)) {\n    throw new Error(\"Invalid schema: \" + theSchema);\n  }\n  const schema = retrieveSchema<T, S>(\n    validator,\n    theSchema,\n    rootSchema,\n    formData\n  );\n  const defaults = computeDefaults<T, S>(\n    validator,\n    schema,\n    undefined,\n    rootSchema,\n    formData,\n    includeUndefinedValues\n  );\n  if (\n    typeof formData === \"undefined\" ||\n    formData === null ||\n    (typeof formData === \"number\" && isNaN(formData))\n  ) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport mergeAllOf, { Options } from \"json-schema-merge-allof\";\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  DEPENDENCIES_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport findSchemaDefinition, {\n  splitKeyElementFromObject,\n} from \"../findSchemaDefinition\";\nimport guessType from \"../guessType\";\nimport isObject from \"../isObject\";\nimport mergeSchemas from \"../mergeSchemas\";\nimport {\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport getMatchingOption from \"./getMatchingOption\";\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param formData - The current formData to assist retrieving a schema\n * @returns - A schema with the appropriate condition resolved\n */\nexport function resolveCondition<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(validator: ValidatorType<T, S>, schema: S, rootSchema: S, formData: T) {\n  const {\n    if: expression,\n    then,\n    else: otherwise,\n    ...resolvedSchemaLessConditional\n  } = schema;\n\n  const conditionalSchema = validator.isValid(\n    expression as S,\n    formData,\n    rootSchema\n  )\n    ? then\n    : otherwise;\n\n  if (conditionalSchema && typeof conditionalSchema !== \"boolean\") {\n    return retrieveSchema<T, S>(\n      validator,\n      mergeSchemas(\n        resolvedSchemaLessConditional,\n        retrieveSchema(validator, conditionalSchema, rootSchema, formData)\n      ) as S,\n      rootSchema,\n      formData\n    );\n  }\n  return retrieveSchema<T, S>(\n    validator,\n    resolvedSchemaLessConditional as S,\n    rootSchema,\n    formData\n  );\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children.\n * Called internally by retrieveSchema.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references and dependencies resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  rootSchema: S = {} as S,\n  formData?: T\n): S {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S>(validator, schema, rootSchema, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return retrieveSchema<T, S>(\n      validator,\n      resolvedSchema,\n      rootSchema,\n      formData\n    );\n  }\n  if (ALL_OF_KEY in schema) {\n    return {\n      ...schema,\n      allOf: schema.allOf!.map((allOfSubschema) =>\n        retrieveSchema<T, S>(\n          validator,\n          allOfSubschema as S,\n          rootSchema,\n          formData\n        )\n      ),\n    };\n  }\n  // No $ref or dependencies attribute found, returning the original schema.\n  return schema;\n}\n\n/** Resolves references within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references resolved\n */\nexport function resolveReference<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(validator: ValidatorType<T, S>, schema: S, rootSchema: S, formData?: T): S {\n  // Retrieve the referenced schema definition.\n  const $refSchema = findSchemaDefinition<S>(schema.$ref, rootSchema);\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchema<T, S>(\n    validator,\n    { ...$refSchema, ...localSchema },\n    rootSchema,\n    formData\n  );\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  theSchema: S,\n  rootSchema?: S,\n  aFormData?: T\n): S {\n  // Clone the schema so we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType =\n    aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S[\"additionalProperties\"] = {};\n    if (typeof schema.additionalProperties !== \"boolean\") {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if (\"type\" in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  rootSchema: S = {} as S,\n  rawFormData?: T\n): S {\n  if (!isObject(schema)) {\n    return {} as S;\n  }\n  let resolvedSchema = resolveSchema<T, S>(\n    validator,\n    schema,\n    rootSchema,\n    rawFormData\n  );\n\n  if (\"if\" in schema) {\n    return resolveCondition<T, S>(\n      validator,\n      schema,\n      rootSchema,\n      rawFormData as T\n    );\n  }\n\n  const formData: GenericObjectType = rawFormData || {};\n\n  if (ALL_OF_KEY in schema) {\n    try {\n      resolvedSchema = mergeAllOf(resolvedSchema, {\n        deep: false,\n      } as Options) as S;\n    } catch (e) {\n      console.warn(\"could not merge subschemas in allOf:\\n\" + e);\n      const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n      return resolvedSchemaWithoutAllOf as S;\n    }\n  }\n  const hasAdditionalProperties =\n    ADDITIONAL_PROPERTIES_KEY in resolvedSchema &&\n    resolvedSchema.additionalProperties !== false;\n  if (hasAdditionalProperties) {\n    return stubExistingAdditionalProperties<T, S>(\n      validator,\n      resolvedSchema,\n      rootSchema,\n      formData as T\n    );\n  }\n  return resolvedSchema;\n}\n\n/** Resolves dependencies within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with its dependencies resolved\n */\nexport function resolveDependencies<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(validator: ValidatorType<T, S>, schema: S, rootSchema: S, formData?: T): S {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  let resolvedSchema: S = remainingSchema as S;\n  if (Array.isArray(resolvedSchema.oneOf)) {\n    resolvedSchema = resolvedSchema.oneOf[\n      getMatchingOption<T, S>(\n        validator,\n        formData,\n        resolvedSchema.oneOf as S[],\n        rootSchema\n      )\n    ] as S;\n  } else if (Array.isArray(resolvedSchema.anyOf)) {\n    resolvedSchema = resolvedSchema.anyOf[\n      getMatchingOption<T, S>(\n        validator,\n        formData,\n        resolvedSchema.anyOf as S[],\n        rootSchema\n      )\n    ] as S;\n  }\n  return processDependencies<T, S>(\n    validator,\n    dependencies,\n    resolvedSchema,\n    rootSchema,\n    formData\n  );\n}\n\n/** Processes all the `dependencies` recursively into the `resolvedSchema` as needed\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  dependencies: S[\"dependencies\"],\n  resolvedSchema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  let schema = resolvedSchema;\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (schema.properties && !(dependencyKey in schema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schema = withDependentProperties(schema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schema = withDependentSchema<T, S>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        formData\n      );\n    }\n    return processDependencies<T, S>(\n      validator,\n      remainingDependencies,\n      schema,\n      rootSchema,\n      formData\n    );\n  }\n  return schema;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S, additionallyRequired?: string[]) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param formData- The current formData to assist retrieving a schema\n * @returns - The schema with the dependent schema resolved into it\n */\nexport function withDependentSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  formData?: T\n) {\n  const { oneOf, ...dependentSchema } = retrieveSchema<T, S>(\n    validator,\n    dependencyValue,\n    rootSchema,\n    formData\n  );\n  schema = mergeSchemas(schema, dependentSchema) as S;\n  // Since it does not contain oneOf, we return the original schema.\n  if (oneOf === undefined) {\n    return schema;\n  }\n  // Resolve $refs inside oneOf.\n  const resolvedOneOf = oneOf.map((subschema) => {\n    if (typeof subschema === \"boolean\" || !(REF_KEY in subschema)) {\n      return subschema;\n    }\n    return resolveReference<T, S>(\n      validator,\n      subschema as S,\n      rootSchema,\n      formData\n    );\n  });\n  return withExactlyOneSubschema<T, S>(\n    validator,\n    schema,\n    rootSchema,\n    dependencyKey,\n    resolvedOneOf,\n    formData\n  );\n}\n\n/** Returns a `schema` with the best choice from the `oneOf` options merged into it\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns  The schema with the best choice of oneOf schemas merged into\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S[\"oneOf\"],\n  formData?: T\n): S {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === \"boolean\" || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: \"object\",\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      const { errors } = validator.validateFormData(formData, conditionSchema);\n      return errors.length === 0;\n    }\n    return false;\n  });\n\n  if (validSubschemas!.length !== 1) {\n    console.warn(\n      \"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\"\n    );\n    return schema;\n  }\n  const subschema: S = validSubschemas[0] as S;\n  const [dependentSubschema] = splitKeyElementFromObject(\n    dependencyKey,\n    subschema.properties as GenericObjectType\n  );\n  const dependentSchema = { ...subschema, properties: dependentSubschema };\n  return mergeSchemas(\n    schema,\n    retrieveSchema<T, S>(validator, dependentSchema, rootSchema, formData)\n  ) as S;\n}\n","import isConstant from \"../isConstant\";\nimport { RJSFSchema, StrictRJSFSchema, ValidatorType } from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(validator: ValidatorType<T, S>, theSchema: S, rootSchema: S = {} as S) {\n  const schema = retrieveSchema<T, S>(\n    validator,\n    theSchema,\n    rootSchema,\n    undefined\n  );\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every(\n      (altSchemas) => typeof altSchemas !== \"boolean\" && isConstant(altSchemas)\n    );\n  }\n  return false;\n}\n","import { RJSFSchema, StrictRJSFSchema, ValidatorType } from \"../types\";\n\nimport isSelect from \"./isSelect\";\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(validator: ValidatorType<T, S>, schema: S, rootSchema?: S) {\n  if (\n    !schema.uniqueItems ||\n    !schema.items ||\n    typeof schema.items === \"boolean\"\n  ) {\n    return false;\n  }\n  return isSelect<T, S>(validator, schema.items as S, rootSchema);\n}\n","import getUiOptions from \"./getUiOptions\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n} from \"./types\";\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://react-jsonschema-form.readthedocs.io/en/latest/usage/widgets/#hidden-widgets\n    \"widget\" in getUiOptions<T, S, F>(uiSchema) &&\n    getUiOptions<T, S, F>(uiSchema)[\"widget\"] !== \"hidden\"\n  );\n}\n","import { UI_WIDGET_KEY } from \"../constants\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === \"files\") {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S>(\n      validator,\n      schema.items as S,\n      rootSchema\n    );\n    return itemsSchema.type === \"string\" && itemsSchema.format === \"data-url\";\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from \"../constants\";\nimport getSchemaType from \"../getSchemaType\";\nimport getUiOptions from \"../getUiOptions\";\nimport isCustomWidget from \"../isCustomWidget\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from \"../types\";\nimport isFilesArray from \"./isFilesArray\";\nimport isMultiSelect from \"./isMultiSelect\";\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType(schema);\n\n  if (schemaType === \"array\") {\n    displayLabel =\n      isMultiSelect<T, S>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === \"object\") {\n    displayLabel = false;\n  }\n  if (schemaType === \"boolean\" && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from \"lodash/isEmpty\";\n\nimport mergeObjects from \"../mergeObjects\";\nimport {\n  ErrorSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidationData,\n  ValidatorType,\n} from \"../types\";\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(\n      oldErrorSchema,\n      additionalErrorSchema,\n      true\n    ) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from \"lodash/get\";\n\nimport {\n  ALL_OF_KEY,\n  DEPENDENCIES_KEY,\n  ID_KEY,\n  ITEMS_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport isObject from \"../isObject\";\nimport {\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = \"root\",\n  idSeparator = \"_\"\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return toIdSchema<T>(\n      validator,\n      _schema,\n      id,\n      rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchema<T, S>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      id,\n      rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (schema.type === \"object\" && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchema<T, S>(\n        validator,\n        isObject(field) ? field : {},\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        idPrefix,\n        idSeparator\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n","import get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport {\n  ALL_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"../constants\";\nimport {\n  PathSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  validator: ValidatorType<T, S>,\n  schema: S,\n  name = \"\",\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return toPathSchema<T, S>(validator, _schema, name, rootSchema, formData);\n  }\n\n  const pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, \"\"),\n  } as PathSchema;\n\n  if (\n    ADDITIONAL_PROPERTIES_KEY in schema &&\n    schema[ADDITIONAL_PROPERTIES_KEY] !== false\n  ) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchema<T>(\n        validator,\n        schema.items as RJSFSchema,\n        `${name}.${i}`,\n        rootSchema,\n        element\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchema<T, S>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property])\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n","import deepEquals from \"./deepEquals\";\nimport {\n  ErrorSchema,\n  FormContextType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"./types\";\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  toIdSchema,\n  toPathSchema,\n} from \"./schema\";\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator` or `rootSchema` to each method. Since both the `validator`\n * and `rootSchema` generally does not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements SchemaUtilsType<T, S>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S>;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   */\n  constructor(validator: ValidatorType<T, S>, rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(\n    validator: ValidatorType<T, S>,\n    rootSchema: S\n  ): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return (\n      this.validator !== validator || !deepEquals(this.rootSchema, rootSchema)\n    );\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S>(\n      this.validator,\n      schema,\n      formData,\n      this.rootSchema,\n      includeUndefinedValues\n    );\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return getDisplayLabel<T, S, F>(\n      this.validator,\n      schema,\n      uiSchema,\n      this.rootSchema\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @returns - The index of the matched option or 0 if none is available\n   */\n  getMatchingOption(formData: T, options: S[]) {\n    return getMatchingOption<T, S>(\n      this.validator,\n      formData,\n      options,\n      this.rootSchema\n    );\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(\n      this.validator,\n      schema,\n      uiSchema,\n      this.rootSchema\n    );\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   */\n  mergeValidationData(\n    validationData: ValidationData<T>,\n    additionalErrorSchema?: ErrorSchema<T>\n  ): ValidationData<T> {\n    return mergeValidationData<T, S>(\n      this.validator,\n      validationData,\n      additionalErrorSchema\n    );\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData: T) {\n    return retrieveSchema<T, S>(\n      this.validator,\n      schema,\n      this.rootSchema,\n      rawFormData\n    );\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(\n    schema: S,\n    id?: string | null,\n    formData?: T,\n    idPrefix = \"root\",\n    idSeparator = \"_\"\n  ): IdSchema<T> {\n    return toIdSchema<T, S>(\n      this.validator,\n      schema,\n      id,\n      this.rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S>(\n      this.validator,\n      schema,\n      name,\n      this.rootSchema,\n      formData\n    );\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S>, rootSchema: S): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema);\n}\n","import cloneDeep from \"lodash/cloneDeep\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport { ErrorSchema } from \"./types\";\nimport { ERRORS_KEY } from \"./constants\";\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath =\n      (Array.isArray(pathOfError) && pathOfError.length > 0) ||\n      typeof pathOfError === \"string\";\n    let errorBlock: ErrorSchema = hasPath\n      ? get(this.errorSchema, pathOfError)\n      : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList)\n      ? [...errorOrList]\n      : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from \"./types\";\nimport { RJSFSchema } from \"./types\";\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from \"./constants\";\nimport getUiOptions from \"./getUiOptions\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  UISchemaSubmitButtonOptions,\n} from \"./types\";\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: \"Submit\",\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[\n      SUBMIT_BTN_OPTIONS_KEY\n    ] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","import React from \"react\";\nimport ReactIs from \"react-is\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport {\n  FormContextType,\n  RJSFSchema,\n  Widget,\n  RegistryWidgetsType,\n  StrictRJSFSchema,\n} from \"./types\";\nimport getSchemaType from \"./getSchemaType\";\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: \"CheckboxWidget\",\n    radio: \"RadioWidget\",\n    select: \"SelectWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  string: {\n    text: \"TextWidget\",\n    password: \"PasswordWidget\",\n    email: \"EmailWidget\",\n    hostname: \"TextWidget\",\n    ipv4: \"TextWidget\",\n    ipv6: \"TextWidget\",\n    uri: \"URLWidget\",\n    \"data-url\": \"FileWidget\",\n    radio: \"RadioWidget\",\n    select: \"SelectWidget\",\n    textarea: \"TextareaWidget\",\n    hidden: \"HiddenWidget\",\n    date: \"DateWidget\",\n    datetime: \"DateTimeWidget\",\n    \"date-time\": \"DateTimeWidget\",\n    \"alt-date\": \"AltDateWidget\",\n    \"alt-datetime\": \"AltDateTimeWidget\",\n    color: \"ColorWidget\",\n    file: \"FileWidget\",\n  },\n  number: {\n    text: \"TextWidget\",\n    select: \"SelectWidget\",\n    updown: \"UpDownWidget\",\n    range: \"RangeWidget\",\n    radio: \"RadioWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  integer: {\n    text: \"TextWidget\",\n    select: \"SelectWidget\",\n    updown: \"UpDownWidget\",\n    range: \"RangeWidget\",\n    radio: \"RadioWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  array: {\n    select: \"SelectWidget\",\n    checkboxes: \"CheckboxesWidget\",\n    files: \"FileWidget\",\n    hidden: \"HiddenWidget\",\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(AWidget: Widget<T, S, F>) {\n  let MergedWidget: Widget<T, S, F> = get(AWidget, \"MergedWidget\");\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions =\n      (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, \"MergedWidget\", MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === \"function\" ||\n    (widget && ReactIs.isForwardRef(React.createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== \"string\") {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === \"string\") {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import { CONST_KEY, ENUM_KEY } from \"./constants\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  if (\n    ENUM_KEY in schema &&\n    Array.isArray(schema.enum) &&\n    schema.enum.length === 1\n  ) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error(\"schema cannot be inferred as a constant\");\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = \"0\" + s;\n  }\n  return s;\n}\n","import get from \"lodash/get\";\n\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n} from \"./types\";\nimport asNumber from \"./asNumber\";\nimport guessType from \"./guessType\";\n\nconst nums = new Set<any>([\"number\", \"integer\"]);\n\n/** Returns the real value for a select widget due to a silly limitation in the DOM which causes option change event\n * values to always be retrieved as strings. Uses the `schema` to help determine the value's true type. If the value is\n * an empty string, then the `emptyValue` from the `options` is returned, falling back to undefined.\n *\n * @param schema - The schema to used to determine the value's true type\n * @param [value] - The value to convert\n * @param [options] - The UIOptionsType from which to potentially extract the emptyValue\n * @returns - The `value` converted to the proper type\n */\nexport default function processSelectValue<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(schema: S, value?: any, options?: UIOptionsType<T, S, F>) {\n  const { enum: schemaEnum, type, items } = schema;\n  if (value === \"\") {\n    return options && options.emptyValue !== undefined\n      ? options.emptyValue\n      : undefined;\n  }\n  if (type === \"array\" && items && nums.has(get(items, \"type\"))) {\n    return value.map(asNumber);\n  }\n  if (type === \"boolean\") {\n    return value === \"true\";\n  }\n  if (nums.has(type)) {\n    return asNumber(value);\n  }\n\n  // If type is undefined, but an enum is present, try and infer the type from\n  // the enum values\n  if (Array.isArray(schemaEnum)) {\n    if (schemaEnum.every((x: any) => nums.has(guessType(x)))) {\n      return asNumber(value);\n    }\n    if (schemaEnum.every((x: any) => guessType(x) === \"boolean\")) {\n      return value === \"true\";\n    }\n  }\n\n  return value;\n}\n","import isObject from \"./isObject\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn(\"additionalItems=true is currently not supported\");\n  }\n  return isObject(schema.additionalItems);\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n} from \"./types\";\nimport getUiOptions from \"./getUiOptions\";\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(schema: RJSFSchema, uiSchema: UiSchema<T, S, F> = {}, formData?: T) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(\",\");\n  // Split params\n  const params: string[] = splitted[0].split(\";\");\n  // Get mime-type from params\n  const type: string = params[0].replace(\"data:\", \"\");\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split(\"=\")[0] === \"name\";\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = \"unknown\";\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here.\n    name = properties[0].split(\"=\")[1];\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  const binary = atob(splitted[1]);\n  const array = [];\n  for (let i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n  // Create the blob object\n  const blob = new window.Blob([new Uint8Array(array)], { type });\n\n  return { blob, name };\n}\n","import rangeSpec from \"./rangeSpec\";\nimport {\n  FormContextType,\n  InputPropsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n} from \"./types\";\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || \"text\",\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\";\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = \"any\";\n      }\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\";\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import {\n  FormContextType,\n  TemplatesType,\n  Registry,\n  UIOptionsType,\n  StrictRJSFSchema,\n  RJSFSchema,\n} from \"./types\";\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  name: Name,\n  registry: Registry<T, S, F>,\n  uiOptions: UIOptionsType<T, S, F> = {}\n): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === \"ButtonTemplates\") {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) ||\n    templates[name]\n  );\n}\n","import getWidget from \"./getWidget\";\nimport {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  Widget,\n} from \"./types\";\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (\n      err.message &&\n      (err.message.startsWith(\"No widget\") ||\n        err.message.startsWith(\"Unsupported widget\"))\n    ) {\n      return false;\n    }\n    throw e;\n  }\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import toConstant from \"./toConstant\";\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from \"./types\";\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== \"production\") {\n    console.warn(\n      \"The enumNames property is deprecated and may be removed in a future major release.\"\n    );\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label =\n        (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) ||\n        String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from \"./types\";\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(\n  properties: string[],\n  order?: string[]\n): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1\n      ? `properties '${arr.join(\"', '\")}'`\n      : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter(\n    (prop) => prop === \"*\" || propertyHash[prop]\n  );\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf(\"*\");\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(\n        `uiSchema order list does not contain ${errorPropList(rest)}`\n      );\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf(\"*\")) {\n    throw new Error(\"uiSchema order list contains more than one wildcard item\");\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","import { DateObject } from \"./types\";\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(\n  dateString?: string,\n  includeTime = true\n): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error(\"Unable to parse date \" + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S[\"additionalProperties\"]) =>\n      schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from \"react\";\n\nimport deepEquals from \"./deepEquals\";\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(\n  component: React.Component,\n  nextProps: any,\n  nextState: any\n) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from \"./types\";\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import pad from \"./pad\";\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return \"\";\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","asNumber","value","test","n","Number","isNaN","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ITEMS_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","UI_WIDGET_KEY","UI_OPTIONS_KEY","getUiOptions","uiSchema","Object","keys","filter","key","indexOf","reduce","options","_extends2","console","error","substring","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","Error","decodeURIComponent","current","jsonpointer","get","undefined","_splitKeyElementFromO","remaining","subSchema","length","getMatchingOption","validator","formData","i","option","properties","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","_extends","_objectDestructuringEmpty","allOf","slice","push","assign","isValid","guessType","getSchemaType","schema","type","additionalProperties","includes","find","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","idx","acc","mergeObjects","obj1","obj2","concatArrays","left","right","toMerge","result","concat","isConstant","mergeSchemas","union","AdditionalItemsHandling","resolveReference","retrieveSchema","$refSchema","_excluded2","rawFormData","resolvedSchema","resolveDependencies","allOfSubschema","resolveSchema","expression","then","otherwise","resolvedSchemaLessConditional","_excluded","conditionalSchema","resolveCondition","mergeAllOf","deep","e","warn","_objectWithoutPropertiesLoose","_excluded3","theSchema","aFormData","forEach","set","stubExistingAdditionalProperties","dependencies","_excluded4","oneOf","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","from","Set","_retrieveSchema","_excluded5","resolvedOneOf","subschema","validSubschemas","conditionPropertySchema","_properties","conditionSchema","validateFormData","errors","dependentSchema","withExactlyOneSubschema","isSelect","altSchemas","isMultiSelect","uniqueItems","getInnerSchemaForArrayItem","additionalItems","Ignore","computeDefaults","rawSchema","parentDefaults","includeUndefinedValues","refSchema","itemSchema","isEmpty","computedDefault","schemaItem","Fallback","minItems","defaultsLength","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","uiOptions","label","displayLabel","_uiOptions$label","schemaType","UI_FIELD_KEY","mergeValidationData","validationData","additionalErrorSchema","oldErrors","oldErrorSchema","errorSchema","toErrorList","toIdSchema","id","idPrefix","idSeparator","idSchema","$id","name","field","fieldId","toPathSchema","_pathSchema","_schema","pathSchema","replace","element","property","SchemaUtils","this","_proto","prototype","getValidator","doesSchemaUtilsDiffer","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","errorBlock","cloneDeep","addErrors","errorOrList","_errorsList","errorsList","apply","setErrors","listToAdd","clearErrors","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","DEFAULT_OPTIONS","props","disabled","submitText","norender","widgetMap","boolean","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","color","file","number","updown","range","integer","array","checkboxes","files","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","React","createElement","isMemo","AWidget","MergedWidget","defaultOptions","defaultProps","_ref","mergeWidgetOptions","toConstant","pad","num","width","s","String","nums","_getUiOptions$expanda","expandable","maxProperties","dataURI","splitted","split","params","param","binary","atob","charCodeAt","blob","window","Blob","Uint8Array","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","registry","templates","err","message","dateString","toJSON","schemaWithEnumNames","enumNames","aSchemaDef","aSchema","title","order","arr","arrayToHash","prev","curr","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","join","lastIndexOf","complete","splice","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaEnum","emptyValue","has","x","schemaRequiresTrueValue","some","component","nextProps","nextState","state","dateObject","time","_dateObject$hour","_dateObject$minute","_dateObject$second","utcTime","UTC","jsonDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":"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"}